<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>往事亦如风 お</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-30T08:32:11.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>往事亦如风</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS绘图</title>
    <link href="http://yoursite.com/2017/11/30/iOS%E7%BB%98%E5%9B%BE/"/>
    <id>http://yoursite.com/2017/11/30/iOS绘图/</id>
    <published>2017-11-30T02:29:02.000Z</published>
    <updated>2017-11-30T08:32:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="iOS-绘图"><a href="#iOS-绘图" class="headerlink" title="iOS 绘图"></a>iOS 绘图</h1><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="298" height="52" src="//music.163.com/outchain/player?type=0&id=438597206&auto=1&height=32"></iframe><blockquote><p>关于下面的绘制图形都是在<code>drawRect</code>方法中，所以我们需要建立一个类叫<code>CustonView</code>，继承于<code>UIView</code>，然后实现<code>drawRect</code>方法。</p></blockquote><h2 id="绘制一个字符串"><a href="#绘制一个字符串" class="headerlink" title="绘制一个字符串"></a>绘制一个字符串</h2><pre><code>UIFont *helveticacabold = [UIFont fontWithName:@&quot;HelveticaNeue-Bold&quot; size:40.f];    NSString *string = @&quot;some String&quot;;    NSDictionary *attibute = @{NSForegroundColorAttributeName:[UIColor whiteColor],NSFontAttributeName:helveticacabold};    [string drawAtPoint:CGPointMake(40, 200) withAttributes:attibute];</code></pre><p><img src="/image/屏幕快照 2017-11-30 10.34.44.png" alt=""></p><h2 id="将字符串画在一个矩形中"><a href="#将字符串画在一个矩形中" class="headerlink" title="将字符串画在一个矩形中"></a>将字符串画在一个矩形中</h2><pre><code>//画在一个矩形    UIFont *helveticacabold = [UIFont fontWithName:@&quot;HelveticaNeue-Bold&quot; size:40.f];    NSString *string = @&quot;some String&quot;;    NSDictionary *attibute = @{NSForegroundColorAttributeName:[UIColor whiteColor],NSFontAttributeName:helveticacabold};    [string drawInRect:CGRectMake(40, 200, 100, 100) withAttributes:attibute];</code></pre><p><img src="/image/屏幕快照 2017-11-30 10.36.57.png" alt=""></p><h2 id="获取color的分量信息"><a href="#获取color的分量信息" class="headerlink" title="获取color的分量信息"></a>获取color的分量信息</h2><pre><code>UIColor *steelBlueColor = [UIColor colorWithRed:0.3f green:0.4f blue:0.6f alpha:1.0f];   CGColorRef colorRef = steelBlueColor.CGColor;   const CGFloat *components = CGColorGetComponents(colorRef);   NSUInteger compentsCount = CGColorGetNumberOfComponents(colorRef);   NSUInteger count = 0;   for (count = 0; count &lt; compentsCount; count++) {       NSLog(@&quot;compenent %lu = %.02f&quot;,count+1,components[count]);   }</code></pre><h2 id="绘制线段"><a href="#绘制线段" class="headerlink" title="绘制线段"></a>绘制线段</h2><pre><code>// 1. 为图形上下文选择一个颜色    [[UIColor brownColor] set];    // 2. 获取图形上下文的句柄    CGContextRef currentContext = UIGraphicsGetCurrentContext();    // 3. 设置线条的宽度 第一个参数是当前图形上下文 ， 第二个是线条的宽度    CGContextSetLineWidth(currentContext, 10.0f);    // 4. 设置线条的起点    CGContextMoveToPoint(currentContext, 50.0f, 10.0f);    // 5. 设置终点    // 线    CGContextAddLineToPoint(currentContext, 100.0f, 200.0f);    // 矩形//    CGContextAddRect(currentContext, CGRectMake(50, 50, 100, 100));    // 6. 绘制上下文    CGContextStrokePath(currentContext);</code></pre><p><img src="/image/屏幕快照 2017-11-30 10.39.30.png" alt=""></p><h2 id="绘制一个X"><a href="#绘制一个X" class="headerlink" title="绘制一个X"></a>绘制一个X</h2><pre><code>// 1. 创建一个可变的句柄    CGMutablePathRef path = CGPathCreateMutable();    // 2. 充满屏幕    CGRect screenBounds = [UIScreen mainScreen].bounds;    // 3. 开始top-left    CGPathMoveToPoint(path, NULL, screenBounds.origin.x, screenBounds.origin.y);    CGPathAddLineToPoint(path, NULL, screenBounds.size.width, screenBounds.size.height);    // 4. 开始另一条线，top-right    CGPathMoveToPoint(path, NULL, screenBounds.size.width, screenBounds.origin.y);    // 5. 画线，form top-right to bottom-left    CGPathAddLineToPoint(path, NULL, screenBounds.origin.x, screenBounds.size.height);    // 6. 获取图形上下文    CGContextRef currentRef = UIGraphicsGetCurrentContext();    CGContextAddPath(currentRef, path);    [[UIColor blueColor] setStroke];    CGContextDrawPath(currentRef, kCGPathStroke);    CGPathRelease(path);</code></pre><p><img src="/image/屏幕快照 2017-11-30 10.40.04.png" alt=""></p><h2 id="绘制矩形"><a href="#绘制矩形" class="headerlink" title="绘制矩形"></a>绘制矩形</h2><pre><code>CGMutablePathRef path = CGPathCreateMutable();    CGRect rectangle = CGRectMake(10.0f, 10.0f, 200.0f, 300.0f);    CGPathAddRect(path, NULL, rectangle);    CGContextRef currentContext = UIGraphicsGetCurrentContext();    CGContextAddPath(currentContext, path);    //充满矩形的颜色    [[UIColor yellowColor] setFill];    //画线的颜色    [[UIColor brownColor] setStroke];    CGContextSetLineWidth(currentContext, 10.0f);    CGContextDrawPath(currentContext, kCGPathFillStroke);    CGPathRelease(path);</code></pre><p><img src="/image/屏幕快照 2017-11-30 10.41.24.png" alt=""></p><h2 id="为形状添加阴影"><a href="#为形状添加阴影" class="headerlink" title="为形状添加阴影"></a>为形状添加阴影</h2><pre><code>// 1. 获取图形上下文    CGContextRef currentContext = UIGraphicsGetCurrentContext();//     避免第二个矩形会被应用，需要保存上下文    CGContextSaveGState(currentContext);//     2. 设置阴影 参数： 1.图形上下文 2. 偏移量-偏移量相对于将要应用阴影的形状的右边和底部。x偏移量越大，阴影更向形状的右边延伸，y偏移量越大，阴影更向形状的底部延伸。 3. 应用到阴影的模糊值，·    CGContextSetShadowWithColor(currentContext, CGSizeMake(10.0f, 10.0f), 20.0f, [UIColor grayColor].CGColor);    CGMutablePathRef path = CGPathCreateMutable();    CGRect firstRect = CGRectMake(55.0f, 60.0f, 150.0f, 150.0f);    CGPathAddRect(path, NULL, firstRect);    CGContextAddPath(currentContext, path);    [[UIColor colorWithRed:0.20f green:0.60f blue:0.80f alpha:1.0f] setFill];    CGContextDrawPath(currentContext, kCGPathFill);    CGPathRelease(path);//    回到之前上下文的状态   避免第二个矩形会被应用，    CGContextRestoreGState(currentContext);</code></pre><p><img src="/image/屏幕快照 2017-11-30 10.44.02.png" alt=""></p><h2 id="创建和绘制渐变"><a href="#创建和绘制渐变" class="headerlink" title="创建和绘制渐变"></a>创建和绘制渐变</h2><pre><code>// 1. 创建色彩空间    CGContextRef currentContext = UIGraphicsGetCurrentContext();//    CGContextSaveGState(currentContext);    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();    UIColor *startColor = [UIColor orangeColor];    CGFloat *startColorComponents = (CGFloat *)CGColorGetComponents([startColor CGColor]);    UIColor *endColor = [UIColor blueColor];    CGFloat *endColorComponents = (CGFloat *)CGColorGetComponents([endColor CGColor]);    // 2. 获取开始颜色和终点颜色的分量之后，我们将他们放入一个扁平数组传递到CGGradientCreateWithColorComonents函数    CGFloat colorComponents[8] = {        startColorComponents[0],        startColorComponents[1],        startColorComponents[2],        startColorComponents[3],        //终点颜色分量        endColorComponents[0],        endColorComponents[1],        endColorComponents[2],        endColorComponents[3],    };    // 3. 因为我们在数组中只有两个颜色，所以我们首先需要指定的是渐变最开始的位置0。0f,接着指定他结束的位置1.0f，    CGFloat colorIndices[2] = {        0.0f, /*               color 0               */        1.0f, /*               color 1               */    };    // 4. 调用CGGradientCreateWithColorComonents函数    CGGradientRef gradient = CGGradientCreateWithColorComponents(colorSpace, (CGFloat *)colorComponents, (CGFloat*)colorIndices, 2);    // 5. 释放色彩空间    CGColorSpaceRelease(colorSpace);    // 6. 绘制线性渐变    CGRect screenBounds = [UIScreen mainScreen].bounds;    CGPoint startPoint, endPoint;    startPoint = CGPointMake(120,260);    endPoint = CGPointMake(200.0f,220);    // kCGGradientDrawsAfterEndLocation 扩展整个渐变到渐变的终点之后的所有点 kCGGradientDrawsBeforeStartLocation 扩展整个渐变到渐变的起点之前的所有点    //  0 不扩展    CGContextDrawLinearGradient(currentContext, gradient, startPoint, endPoint, 0);    CGGradientRelease(gradient);</code></pre><p><img src="/image/屏幕快照 2017-11-30 10.46.05.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;iOS-绘图&quot;&gt;&lt;a href=&quot;#iOS-绘图&quot; class=&quot;headerlink&quot; title=&quot;iOS 绘图&quot;&gt;&lt;/a&gt;iOS 绘图&lt;/h1&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; margi
      
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="绘图" scheme="http://yoursite.com/tags/%E7%BB%98%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>获取当前app的名称和版本号</title>
    <link href="http://yoursite.com/2017/11/13/%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E5%BA%94%E7%94%A8%E7%9A%84%E5%90%8D%E7%A7%B0%E5%92%8C%E7%89%88%E6%9C%AC%E5%8F%B7/"/>
    <id>http://yoursite.com/2017/11/13/获取当前应用的名称和版本号/</id>
    <published>2017-11-13T10:09:36.000Z</published>
    <updated>2017-11-30T08:35:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>#iOS获取当前app的名称和版本号</p><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="298" height="52" src="//music.163.com/outchain/player?type=0&id=438597206&auto=1&height=32"></iframe><br>    NSDictionary *infoDictionary = [[NSBundle mainBundle] infoDictionary];</p><blockquote><p>app名称</p></blockquote><pre><code>NSString *app_Name = [infoDictionary objectForKey:@&quot;CFBundleDisplayName&quot;];</code></pre><blockquote><p>app版本</p></blockquote><pre><code>NSString *app_Version = [infoDictionary objectForKey:@&quot;CFBundleShortVersionString&quot;];</code></pre><blockquote><p>app build版本</p></blockquote><pre><code>NSString *app_build = [infoDictionary objectForKey:@&quot;CFBundleVersion&quot;];</code></pre><blockquote><p>手机序列号</p></blockquote><pre><code>NSString* identifierNumber = [[UIDevice currentDevice] uniqueIdentifier];NSLog(@&quot;手机序列号: %@&quot;,identifierNumber);</code></pre><blockquote><p>手机别名： 用户定义的名称</p></blockquote><pre><code>NSString* userPhoneName = [[UIDevice currentDevice] name];NSLog(@&quot;手机别名: %@&quot;, userPhoneName);</code></pre><blockquote><p>设备名称</p></blockquote><pre><code>NSString* deviceName = [[UIDevice currentDevice] systemName];NSLog(@&quot;设备名称: %@&quot;,deviceName );</code></pre><blockquote><p>手机系统版本</p></blockquote><pre><code>NSString* phoneVersion = [[UIDevice currentDevice] systemVersion];NSLog(@&quot;手机系统版本: %@&quot;, phoneVersion);</code></pre><blockquote><p>手机型号</p></blockquote><pre><code>NSString* phoneModel = [[UIDevice currentDevice] model];NSLog(@&quot;手机型号: %@&quot;,phoneModel );</code></pre><blockquote><p>地方型号  （国际化区域名称）</p></blockquote><pre><code>NSString* localPhoneModel = [[UIDevice currentDevice] localizedModel];NSLog(@&quot;国际化区域名称: %@&quot;,localPhoneModel );NSDictionary *infoDictionary = [[NSBundle mainBundle] infoDictionary];</code></pre><blockquote><p>当前应用名称</p></blockquote><pre><code>NSString *appCurName = [infoDictionary objectForKey:@&quot;CFBundleDisplayName&quot;];NSLog(@&quot;当前应用名称：%@&quot;,appCurName);</code></pre><blockquote><p>当前应用软件版本  比如：1.0.1</p></blockquote><pre><code>NSString *appCurVersion = [infoDictionary objectForKey:@&quot;CFBundleShortVersionString&quot;];NSLog(@&quot;当前应用软件版本:%@&quot;,appCurVersion);</code></pre><blockquote><p>当前应用版本号码  int类型</p></blockquote><pre><code>NSString *appCurVersionNum = [infoDictionary objectForKey:@&quot;CFBundleVersion&quot;];NSLog(@&quot;当前应用版本号码：%@&quot;,appCurVersionNum);</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#iOS获取当前app的名称和版本号&lt;/p&gt;
&lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;298&quot; height=&quot;52&quot; src=&quot;//music.163.c
      
    
    </summary>
    
      <category term="杂笔" scheme="http://yoursite.com/categories/%E6%9D%82%E7%AC%94/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>为Hexo Next主题添加分享及打赏功能</title>
    <link href="http://yoursite.com/2017/10/13/%E4%B8%BAHexo-Next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E5%88%86%E4%BA%AB%E5%8F%8A%E6%89%93%E8%B5%8F%E5%8A%9F%E8%83%BD/"/>
    <id>http://yoursite.com/2017/10/13/为Hexo-Next主题添加分享及打赏功能/</id>
    <published>2017-10-13T09:24:08.000Z</published>
    <updated>2017-10-16T02:10:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为Hexo-Next主题添加分享及打赏功能"><a href="#为Hexo-Next主题添加分享及打赏功能" class="headerlink" title="为Hexo Next主题添加分享及打赏功能"></a>为Hexo Next主题添加分享及打赏功能</h1><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="298" height="52" src="//music.163.com/outchain/player?type=0&id=438597206&auto=1&height=32"></iframe><br><a href="http://www.kaipeng.net.cn" target="_blank" rel="external">博客地址：往事亦如风的博客</a></p><p>要想先看打赏和分享功能效果，请移步<a href="">我的博客</a></p><h2 id="打赏功能"><a href="#打赏功能" class="headerlink" title="打赏功能"></a>打赏功能</h2><blockquote><p>因为next主题自带打赏功能，所以我们只需要在next的主题配置文件中找到如下代码,<code>image</code>文件夹是我在blog/source下面建立的文件夹，然后把你的微信及支付宝收钱码图片拉进去，修改名字为<code>wechatreward.png</code>和<code>alipayreward.png</code></p></blockquote><pre><code>reward_comment: 坚持原创技术分享，您的支持将鼓励我继续创作！wechatpay: /image/wechatreward.pngalipay: /image/alipayreward.png</code></pre><h2 id="分享功能"><a href="#分享功能" class="headerlink" title="分享功能"></a>分享功能</h2><p>要想集成分享功能，先要去<a href="http://sharesdk.mob.com" target="_blank" rel="external">ShareSDK</a>注册账号和项目，然后得到项目的<code>appkey</code></p><p>假如你不嫌麻烦，下面是在网页上分享按钮的代码，你可以将以下代码添加到想要显示的位置，添加完之后需要修改代码中的<code>appkey</code>是你之前申请的<code>appkey</code></p><pre><code>&lt;!--MOB SHARE BEGIN--&gt;&lt;div class=&quot;-mob-share-ui-button -mob-share-open&quot;&gt;分享&lt;/div&gt;&lt;div class=&quot;-mob-share-ui&quot; style=&quot;display: none&quot;&gt;&lt;ul class=&quot;-mob-share-list&quot;&gt;&lt;li class=&quot;-mob-share-weibo&quot;&gt;&lt;p&gt;新浪微博&lt;/p&gt;&lt;/li&gt;&lt;li class=&quot;-mob-share-tencentweibo&quot;&gt;&lt;p&gt;腾讯微博&lt;/p&gt;&lt;/li&gt;&lt;li class=&quot;-mob-share-qzone&quot;&gt;&lt;p&gt;QQ空间&lt;/p&gt;&lt;/li&gt;&lt;li class=&quot;-mob-share-qq&quot;&gt;&lt;p&gt;QQ好友&lt;/p&gt;&lt;/li&gt;&lt;li class=&quot;-mob-share-renren&quot;&gt;&lt;p&gt;人人网&lt;/p&gt;&lt;/li&gt;&lt;li class=&quot;-mob-share-kaixin&quot;&gt;&lt;p&gt;开心网&lt;/p&gt;&lt;/li&gt;&lt;li class=&quot;-mob-share-douban&quot;&gt;&lt;p&gt;豆瓣&lt;/p&gt;&lt;/li&gt;&lt;li class=&quot;-mob-share-facebook&quot;&gt;&lt;p&gt;Facebook&lt;/p&gt;&lt;/li&gt;&lt;li class=&quot;-mob-share-twitter&quot;&gt;&lt;p&gt;Twitter&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;-mob-share-close&quot;&gt;取消&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;-mob-share-ui-bg&quot;&gt;&lt;/div&gt;&lt;script id=&quot;-mob-share&quot; src=&quot;http://f1.webshare.mob.com/code/mob-share.js?appkey=你的appkey&quot;&gt;&lt;/script&gt;&lt;!--MOB SHARE END--&gt;      </code></pre><h2 id="添加到Next主题中"><a href="#添加到Next主题中" class="headerlink" title="添加到Next主题中"></a>添加到Next主题中</h2><p>那么怎么添加到next主题上呢。步骤如下</p><h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h3><p>我们首先要在主题文件夹下的<code>layout</code>文件夹找到<code>_partials</code>下的share文件夹，之后添加一个名为<code>sharesdk.swig</code>的文件。我们可以看出来。这个文件夹下放的全部是分享的配置文件.添加的内容为上面的那一大段代码。只需要修改一部分。修改的部分为：</p><pre><code>&lt;script id=&quot;-mob-share&quot; src=&quot;http://f1.webshare.mob.com/code/mob-share.js?appkey={{ theme.shareSDKappkey }}&quot;&gt;&lt;/script&gt;</code></pre><p>修改这写的目的是为了让我们能够在主题的配置文件中添加appkey。（只需要在主题的配置文件中添加一个shareSDKappkey并为其附上值即可）。</p><h3 id="添加可选配置"><a href="#添加可选配置" class="headerlink" title="添加可选配置"></a>添加可选配置</h3><p>虽然我们添加了sharesdk的分享的按钮了，但是如果有一天我们不想使用了呢。当然，很简单。只需要修改配置文件就可以了。那么如何实现呢？<br>首先，找到主题文件夹下的<code>layout</code>文件夹下的<code>post.swig</code></p><p>大概在16行左右添加</p><pre><code>&lt;div class=&quot;post-spread&quot;&gt;      {% if theme.jiathis %}        {% include '_partials/share/jiathis.swig' %}      {% elseif theme.baidushare %}        {% include '_partials/share/baidushare.swig' %}      {% elseif theme.add_this_id %}        {% include '_partials/share/add-this.swig' %}      {% elseif theme.duoshuo_shortname and theme.duoshuo_share %}        {% include '_partials/share/duoshuo_share.swig' %}        {% elseif theme.sharesdk %}        {% include '_partials/share/sharesdk.swig' %}      {% endif %}    &lt;/div&gt;</code></pre><p>添加了代码</p><pre><code>{% elseif theme.sharesdk %}        {% include '_partials/share/sharesdk.swig' %}</code></pre><p>这段代码就是根据主题文件的配置，来为文档添加相应的<code>swig</code>文件。要想实现在配置文件中选择性的使用分享功能，只需要在配置文件中修改即可。</p><h3 id="修改-config-yml"><a href="#修改-config-yml" class="headerlink" title="修改_config.yml"></a>修改_config.yml</h3><p>接下来就是修改项目的配置文件了。</p><p>在主题的配置文件中添加：</p><pre><code>#Sharesharesdk: trueshareSDKappkey: appkey</code></pre><p>如果想使用就可以设置为true并添加appkey了。当然不想使用。直接注释就可以了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;为Hexo-Next主题添加分享及打赏功能&quot;&gt;&lt;a href=&quot;#为Hexo-Next主题添加分享及打赏功能&quot; class=&quot;headerlink&quot; title=&quot;为Hexo Next主题添加分享及打赏功能&quot;&gt;&lt;/a&gt;为Hexo Next主题添加分享及打赏功能&lt;/
      
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Mac 上搭建基于Github的hexo博客</title>
    <link href="http://yoursite.com/2017/10/11/Mac-%E4%B8%8A%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8EGithub%E7%9A%84hexo%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2017/10/11/Mac-上搭建基于Github的hexo博客/</id>
    <published>2017-10-11T08:19:40.000Z</published>
    <updated>2017-10-16T01:55:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mac-上搭建基于Github的hexo博客"><a href="#Mac-上搭建基于Github的hexo博客" class="headerlink" title="Mac 上搭建基于Github的hexo博客"></a>Mac 上搭建基于Github的hexo博客</h1><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="298" height="52" src="//music.163.com/outchain/player?type=0&id=438597206&auto=1&height=32"></iframe><br><a href="http://www.kaipeng.net.cn" target="_blank" rel="external">博客地址：往事亦如风的博客</a></p><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">hexo官方文档</a></p><p>本来想搭一个自己的博客，但是因为服务器真心买不起，所以就使用gitpages搭建一个免费的博客。</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ul><li>Node.js</li></ul><p><a href="https://nodejs.org/en/" target="_blank" rel="external">点击链接进入Node.js官网</a>, 下载v5.5.0 Stable 一路安装即可。</p><ul><li>因为Xcode自带git，所以就没必要下了，如果没有安装的同学可以移步<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">hexo官方文档</a>去下载git</li></ul><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><blockquote><p>当Node.js和git安装好，下面就需要安装Hexo了，终端执行以下命令</p></blockquote><pre><code>$ sudo npm install -g hexo</code></pre><h3 id="Hexo-初始化"><a href="#Hexo-初始化" class="headerlink" title="Hexo 初始化"></a>Hexo 初始化</h3><p>在桌面新建一个blog文件夹，然后cd 到那个目录下<br>执行以下命令</p><pre><code>$ hexo init$ npm install$ hexo s</code></pre><p>此时在浏览器中打开网址<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a>相信就可以看到一个静态网页</p><h2 id="关联Github"><a href="#关联Github" class="headerlink" title="关联Github"></a>关联Github</h2><h3 id="创建Github账号并新建项目"><a href="#创建Github账号并新建项目" class="headerlink" title="创建Github账号并新建项目"></a>创建Github账号并新建项目</h3><p>项目名称为<strong>用户名.github.io</strong>的固定写法,如下图所示</p><p><img src="/image/WX20171011-165905.png" alt=""></p><p>cd 到<code>blog</code>文件夹下,vim打开<code>_config.yml</code>，命令如下</p><pre><code>$ vim _config.yml</code></pre><p>打开后滑倒最后，修改成下面的样子,下面的coding是我在codeing上新建的一个项目，因为在github上访问太慢，所以我新建了一个仓库。</p><pre><code>deploy:  type: git  repository:            github: https://github.com/jikaipenggithub/jikaipenggithub.github.io            coding: https://git.coding.net/a751122452/a751122452.coding.me.git  branch: master</code></pre><blockquote><p>注意：在配置所有的_config.yml文件时（包括theme中的），在所有的冒号:后边都要加一个空格，否则执行hexo命令会报错.</p></blockquote><p>修改完成之后保存退出，然后输入以下命令</p><pre><code>hexo cleanhexo ghexo d</code></pre><p>当以上命令执行完成之后，在浏览器打开<code>http://你的用户名.github.io</code>，能看到和打开<code>http://localhost:4000</code>一样的页面。</p><h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><p><a href="https://hexo.io/themes/" target="_blank" rel="external">Hexo官网主题页献给大家</a>大家可以去下载自己喜欢的主题去配置，以下以<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">hexo-theme-next</a>为例<br>终端cd到 blog 目录下执行如下命令：</p><pre><code>$ git clone https://github.com/iissnan/hexo-theme-next themes/next</code></pre><p>将blog目录下_config.yml里theme的名称landscape修改为next</p><p>终端cd到blog目录下执行如下命令(每次部署文章的步骤)：</p><pre><code>$ hexo clean           //清除缓存文件 (db.json) 和已生成的静态文件 (public)$ hexo g             //生成缓存和静态文件$ hexo d             //重新部署到服务器</code></pre><p>至于更改<code>theme</code>内容，比如名称，描述，头像等去修改<code>blog/_config.yml</code>文件和<code>blog/themes/next/_config.yml</code>文件中对应的属性名称即可， </p><h2 id="绑定个人域名"><a href="#绑定个人域名" class="headerlink" title="绑定个人域名"></a>绑定个人域名</h2><ul><li>Github端</li></ul><p>在<code>/blog/themes/landscape/source</code>目录下新建文件名为：<code>CNAME</code>文件，注意没有后缀名！直接将自己的域名如：<code>kaipeng.net.cn</code>写入,如果换主题需要在新的主题下面的source下重建<code>CNAME</code>,并写入域名。</p><p>域名解析如下图所示，蓝色箭头指的ip是我的github的仓库地址，你在终端ping一下就知道了，另外两个是coding的仓库地址，要是有不懂的滴滴我<br><img src="/image/WX20171011-173208.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      Mac 上搭建基于Github的hexo博客
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
